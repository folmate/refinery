/*
 * SPDX-FileCopyrightText: 2021-2023 The Refinery Authors <https://refinery.tools/>
 *
 * SPDX-License-Identifier: EPL-2.0
 */

/*
 * generated by Xtext 2.25.0
 */
package tools.refinery.language.web;

import com.google.inject.Binder;
import org.eclipse.xtext.ide.ExecutorServiceProvider;
import org.eclipse.xtext.web.server.XtextServiceDispatcher;
import org.eclipse.xtext.web.server.hover.HoverService;
import org.eclipse.xtext.web.server.model.IWebDocumentProvider;
import org.eclipse.xtext.web.server.model.XtextWebDocumentAccess;
import org.eclipse.xtext.web.server.occurrences.OccurrencesService;
import tools.refinery.language.web.hover.ProblemHoverService;
import tools.refinery.language.web.occurrences.ProblemOccurrencesService;
import tools.refinery.language.web.xtext.server.ThreadPoolExecutorServiceProvider;
import tools.refinery.language.web.xtext.server.push.PushServiceDispatcher;
import tools.refinery.language.web.xtext.server.push.PushWebDocumentAccess;
import tools.refinery.language.web.xtext.server.push.PushWebDocumentProvider;

import java.util.concurrent.ExecutorService;

/**
 * Use this class to register additional components to be used within the web application.
 */
// Unused methods in this class are called by reflection to configure the Xtext Injector.
@SuppressWarnings("unused")
public class ProblemWebModule extends AbstractProblemWebModule {
	public Class<? extends IWebDocumentProvider> bindIWebDocumentProvider() {
		return PushWebDocumentProvider.class;
	}

	public Class<? extends XtextWebDocumentAccess> bindXtextWebDocumentAccess() {
		return PushWebDocumentAccess.class;
	}

	public Class<? extends XtextServiceDispatcher> bindXtextServiceDispatcher() {
		return PushServiceDispatcher.class;
	}

	public Class<? extends OccurrencesService> bindOccurrencesService() {
		return ProblemOccurrencesService.class;
	}

	public Class<? extends ExecutorServiceProvider> bindExecutorServiceProvider() {
		return ThreadPoolExecutorServiceProvider.class;
	}

	public void configureExecutorServiceProvider(Binder binder) {
		binder.bind(ExecutorService.class).toProvider(ThreadPoolExecutorServiceProvider.class);
	}

	public Class<? extends HoverService> bindHoverService() {
		return ProblemHoverService.class;
	}
}
